{"version":3,"sources":["../../src/helpers/uploadFileCloudinary.js"],"names":["dataUri","DataUri","cloudinary","v2","config","cloud_name","process","env","CLOUDINARY_NAME","api_key","CLOUDINARY_API_KEY","api_secret","CLOUDINARY_SECRET_KEY","processFile","file","format","path","extname","originalname","toString","buffer","content","uploadFile","processedFile","result","uploader","upload","error","Error","message","deleteFile","publicId","destroy","extractCloudinaryOutput","previewPublicId","collectionPublicId","previewUrl","collectionUrl","map","output","public_id","url"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,OAAO,GAAG,IAAIC,mBAAJ,EAAhB;;AAEAC,uBAAWC,EAAX,CAAcC,MAAd,CAAqB;AACnBC,EAAAA,UAAU,EAAEC,OAAO,CAACC,GAAR,CAAYC,eADL;AAEnBC,EAAAA,OAAO,EAAEH,OAAO,CAACC,GAAR,CAAYG,kBAFF;AAGnBC,EAAAA,UAAU,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHL,CAArB;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI;AAAA,SACtBd,OAAO,CAACe,MAAR,CAAeC,iBAAKC,OAAL,CAAaH,IAAI,CAACI,YAAlB,EAAgCC,QAAhC,EAAf,EAA2DL,IAAI,CAACM,MAAhE,EAAwEC,OADlD;AAAA,CAAxB;;AAGO,IAAMC,UAAU,GAAG,eAAbA,UAAa,CAAMR,IAAN,EAAc;AACtC,MAAI;AACF,QAAMS,aAAa,GAAGV,WAAW,CAACC,IAAD,CAAjC;AACA,QAAMU,MAAM,GAAG,MAAMtB,uBAAWC,EAAX,CAAcsB,QAAd,CAAuBC,MAAvB,CAA8BH,aAA9B,CAArB;AACA,WAAOC,MAAP;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAUD,KAAK,CAACE,OAAhB,CAAN;AACD;AACF,CARM;;;;AAUA,IAAMC,UAAU,GAAG,eAAbA,UAAa,CAAMC,QAAN,EAAkB;AAC1C,MAAI;AACF,QAAMP,MAAM,GAAG,MAAMtB,uBAAWC,EAAX,CAAcsB,QAAd,CAAuBO,OAAvB,CAA+BD,QAA/B,CAArB;AACA,WAAOP,MAAP;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAUD,KAAK,CAACE,OAAhB,CAAN;AACD;AACF,CAPM;;;;AASA,IAAMI,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAT,MAAM,EAAI;AAC/C,MAAIU,eAAJ,EAAqBC,kBAArB,EAAyCC,UAAzC,EAAqDC,aAArD,CAD+C,CAG/C;;AACAb,EAAAA,MAAM,CAACc,GAAP,CAAW,UAAAC,MAAM,EAAI;AACnB,QAAIA,MAAM,CAACxB,MAAP,KAAkB,KAAtB,EAA6B;AAC3BoB,MAAAA,kBAAkB,GAAGI,MAAM,CAACC,SAA5B;AACAH,MAAAA,aAAa,GAAGE,MAAM,CAACE,GAAvB;AACD,KAHD,MAGO;AACLP,MAAAA,eAAe,GAAGK,MAAM,CAACC,SAAzB;AACAJ,MAAAA,UAAU,GAAGG,MAAM,CAACE,GAApB;AACD;AACF,GARD;AAUA,SAAO;AAAEP,IAAAA,eAAe,EAAfA,eAAF;AAAmBC,IAAAA,kBAAkB,EAAlBA,kBAAnB;AAAuCC,IAAAA,UAAU,EAAVA,UAAvC;AAAmDC,IAAAA,aAAa,EAAbA;AAAnD,GAAP;AACD,CAfM","sourcesContent":["import cloudinary from \"cloudinary\";\nimport DataUri from \"datauri\";\nimport path from \"path\";\n\nconst dataUri = new DataUri();\n\ncloudinary.v2.config({\n  cloud_name: process.env.CLOUDINARY_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_SECRET_KEY\n});\n\nconst processFile = file =>\n  dataUri.format(path.extname(file.originalname).toString(), file.buffer).content;\n\nexport const uploadFile = async file => {\n  try {\n    const processedFile = processFile(file);\n    const result = await cloudinary.v2.uploader.upload(processedFile);\n    return result;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const deleteFile = async publicId => {\n  try {\n    const result = await cloudinary.v2.uploader.destroy(publicId);\n    return result;\n  } catch (error) {\n    throw new Error(error.message);\n  }\n};\n\nexport const extractCloudinaryOutput = result => {\n  let previewPublicId, collectionPublicId, previewUrl, collectionUrl;\n\n  // eslint-disable-next-line array-callback-return\n  result.map(output => {\n    if (output.format === \"pdf\") {\n      collectionPublicId = output.public_id;\n      collectionUrl = output.url;\n    } else {\n      previewPublicId = output.public_id;\n      previewUrl = output.url;\n    }\n  });\n\n  return { previewPublicId, collectionPublicId, previewUrl, collectionUrl };\n};\n"],"file":"uploadFileCloudinary.js"}