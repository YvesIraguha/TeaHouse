{"version":3,"sources":["../../src/helpers/auth.js"],"names":["User","Models","secretKey","process","env","SECRET_KEY","createJwtPayload","email","firstName","lastName","id","createJwtToken","user","payload","token","jwt","sign","algorithm","error","Error","decodeToken","verify","hashPassword","password","hashedPassword","bcrypt","hash","comparePasswords","matchingPassword","compare","checkUserType","findOne","where"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;IAEQA,I,GAASC,kB,CAATD,I;AACR,IAAME,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA9B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,SAAV,QAAUA,SAAV;AAAA,MAAqBC,QAArB,QAAqBA,QAArB;AAAA,MAA+BC,EAA/B,QAA+BA,EAA/B;AAAA,SAAyC;AAChEH,IAAAA,KAAK,EAALA,KADgE;AAEhEC,IAAAA,SAAS,EAATA,SAFgE;AAGhEC,IAAAA,QAAQ,EAARA,QAHgE;AAIhEC,IAAAA,EAAE,EAAFA;AAJgE,GAAzC;AAAA,CAAzB;;AAOO,IAAMC,cAAc,GAAG,eAAjBA,cAAiB,CAAMC,IAAN,EAAc;AAC1C,MAAI;AACF,QAAMC,OAAO,GAAGP,gBAAgB,CAACM,IAAD,CAAhC;AACA,QAAME,KAAK,GAAG,MAAMC,yBAAIC,IAAJ,CAASH,OAAT,EAAkBX,SAAlB,EAA6B;AAAEe,MAAAA,SAAS,EAAE;AAAb,KAA7B,CAApB;AACA,WAAOH,KAAP;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF,CARM;;;;AAUA,IAAMC,WAAW,GAAG,eAAdA,WAAc,CAAMN,KAAN,EAAe;AACxC,MAAI;AACF,QAAMD,OAAO,GAAG,MAAME,yBAAIM,MAAJ,CAAWP,KAAX,EAAkBZ,SAAlB,CAAtB;AACA,WAAOW,OAAP;AACD,GAHD,CAGE,OAAOK,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF,CAPM;;;;AASA,IAAMG,YAAY,GAAG,eAAfA,YAAe,CAAMC,QAAN,EAAkB;AAC5C,MAAI;AACF,QAAMC,cAAc,GAAG,MAAMC,mBAAOC,IAAP,CAAYH,QAAZ,EAAsB,EAAtB,CAA7B;AACA,WAAOC,cAAP;AACD,GAHD,CAGE,OAAON,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACD;AACF,CAPM;;;;AASA,IAAMQ,gBAAgB,GAAG,eAAnBA,gBAAmB,CAAOJ,QAAP,EAAiBC,cAAjB,EAAoC;AAClE,MAAI;AACF,QAAMI,gBAAgB,GAAG,MAAMH,mBAAOI,OAAP,CAAeN,QAAf,EAAyBC,cAAzB,CAA/B;AACA,WAAOI,gBAAP;AACD,GAHD,CAGE,OAAOV,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF,CAPM;;;;AASA,IAAMW,aAAa,GAAG,eAAhBA,aAAgB,CAAMvB,KAAN,EAAe;AAC1C,MAAI;AACF,QAAMK,IAAI,GAAG,MAAMZ,IAAI,CAAC+B,OAAL,CAAa;AAAEC,MAAAA,KAAK,EAAE;AAAEzB,QAAAA,KAAK,EAALA;AAAF;AAAT,KAAb,CAAnB;AACA,WAAOK,IAAP;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD;AACF,CAPM","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcrypt\";\nimport Models from \"../../models\";\n\nconst { User } = Models;\nconst secretKey = process.env.SECRET_KEY;\n\nconst createJwtPayload = ({ email, firstName, lastName, id }) => ({\n  email,\n  firstName,\n  lastName,\n  id\n});\n\nexport const createJwtToken = async user => {\n  try {\n    const payload = createJwtPayload(user);\n    const token = await jwt.sign(payload, secretKey, { algorithm: \"HS256\" });\n    return token;\n  } catch (error) {\n    throw new Error(\"Something went wrong while creating a token\");\n  }\n};\n\nexport const decodeToken = async token => {\n  try {\n    const payload = await jwt.verify(token, secretKey);\n    return payload;\n  } catch (error) {\n    throw new Error(\"Invalid token provided\");\n  }\n};\n\nexport const hashPassword = async password => {\n  try {\n    const hashedPassword = await bcrypt.hash(password, 10);\n    return hashedPassword;\n  } catch (error) {\n    throw new Error(\"Unable to create a hashed password\");\n  }\n};\n\nexport const comparePasswords = async (password, hashedPassword) => {\n  try {\n    const matchingPassword = await bcrypt.compare(password, hashedPassword);\n    return matchingPassword;\n  } catch (error) {\n    throw new Error(\"Passwords comparison failed\");\n  }\n};\n\nexport const checkUserType = async email => {\n  try {\n    const user = await User.findOne({ where: { email } });\n    return user;\n  } catch (error) {\n    throw new Error(\"Unable to retrieve a user\");\n  }\n};\n"],"file":"auth.js"}