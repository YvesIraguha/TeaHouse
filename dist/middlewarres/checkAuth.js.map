{"version":3,"sources":["../../src/middlewarres/checkAuth.js"],"names":["checkAdmin","req","res","next","authorization","headers","token","split","user","type","email","role","status","send","error","Error","message","checkToken","params","decodedToken","resetToken"],"mappings":";;;;;;;AAAA;;AAEO,IAAMA,UAAU,GAAG,eAAbA,UAAa,CAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAClD,MAAI;AAAA,QACMC,aADN,GACwBH,GAAG,CAACI,OAD5B,CACMD,aADN;;AAEF,QAAIA,aAAJ,EAAmB;AACjB,UAAME,KAAK,GAAGL,GAAG,CAACI,OAAJ,CAAYD,aAAZ,CAA0BG,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;AACA,UAAMC,IAAI,GAAG,MAAM,uBAAYF,KAAZ,CAAnB;AACA,UAAMG,IAAI,GAAG,MAAM,yBAAcD,IAAI,CAACE,KAAnB,CAAnB;;AACA,UAAID,IAAI,CAACE,IAAL,KAAc,OAAlB,EAA2B;AACzBV,QAAAA,GAAG,CAACO,IAAJ,GAAWA,IAAX;AACAL,QAAAA,IAAI;AACL,OAHD,MAGO;AACL,eAAOD,GAAG,CACPU,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAFD,CAAP;AAGD;AACF,KAZD,MAYO;AACL,YAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACD;AACF,GAjBD,CAiBE,OAAOD,KAAP,EAAc;AACdZ,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAEA,KAAK,CAACE,OAAf;AAAwBJ,MAAAA,MAAM,EAAE;AAAhC,KAArB;AACD;AACF,CArBM;;;;AAuBA,IAAMK,UAAU,GAAG,eAAbA,UAAa,CAAOhB,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,EAA0B;AAClD,MAAI;AAAA,QACMG,KADN,GACgBL,GAAG,CAACiB,MADpB,CACMZ,KADN;AAEF,QAAMa,YAAY,GAAG,MAAM,uBAAYb,KAAZ,CAA3B;AACA,QAAME,IAAI,GAAG,MAAM,yBAAcW,YAAY,CAACT,KAA3B,CAAnB;;AAEA,QAAIJ,KAAK,KAAKE,IAAI,CAACY,UAAnB,EAA+B;AAC7BnB,MAAAA,GAAG,CAACO,IAAJ,GAAWA,IAAX;AACAL,MAAAA,IAAI;AACL,KAHD,MAGO;AACLD,MAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE,eAAT;AAA0BF,QAAAA,MAAM,EAAE;AAAlC,OAArB;AACD;AACF,GAXD,CAWE,OAAOE,KAAP,EAAc;AACdZ,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE,4BAAT;AAAuCF,MAAAA,MAAM,EAAE;AAA/C,KAArB;AACD;AACF,CAfM","sourcesContent":["import { decodeToken, checkUserType } from \"../helpers/auth\";\n\nexport const checkAdmin = async (req, res, next) => {\n  try {\n    const { authorization } = req.headers;\n    if (authorization) {\n      const token = req.headers.authorization.split(\" \")[1];\n      const user = await decodeToken(token);\n      const type = await checkUserType(user.email);\n      if (type.role === \"Admin\") {\n        req.user = user;\n        next();\n      } else {\n        return res\n          .status(403)\n          .send({ error: \"You have to be an admin to perform this action\" });\n      }\n    } else {\n      throw new Error(\"Provide a valid token to carry out this action\");\n    }\n  } catch (error) {\n    res.status(401).send({ error: error.message, status: 401 });\n  }\n};\n\nexport const checkToken = async (req, res, next) => {\n  try {\n    const { token } = req.params;\n    const decodedToken = await decodeToken(token);\n    const user = await checkUserType(decodedToken.email);\n\n    if (token === user.resetToken) {\n      req.user = user;\n      next();\n    } else {\n      res.status(403).send({ error: \"Access denied\", status: 403 });\n    }\n  } catch (error) {\n    res.status(401).send({ error: \"Unable to updated password\", status: 401 });\n  }\n};\n"],"file":"checkAuth.js"}