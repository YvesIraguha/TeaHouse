{"version":3,"sources":["../../src/controllers/users.js"],"names":["User","Models","ResetPassword","req","res","email","body","user","findOne","where","token","userWithToken","update","resetToken","returning","id","firstName","sendGridResponse","length","statusCode","status","send","message","data","error","password","newPassword","updatedUser"],"mappings":"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","sourcesContent":["import Models from \"../../models\";\nimport { resetPasswordToken } from \"../helpers/users\";\nimport { hashPassword } from \"../helpers/auth\";\nimport { sendResetPasswordLink } from \"../helpers/sendEmail\";\n\nconst { User } = Models;\n\nclass ResetPassword {\n  static async createToken(req, res) {\n    const {\n      body: { email }\n    } = req;\n\n    const user = await User.findOne({ where: { email } });\n    if (user) {\n      const token = await resetPasswordToken(email);\n      const userWithToken = await User.update(\n        { resetToken: token },\n        { where: { email }, returning: true }\n      );\n      const { id, resetToken, firstName } = userWithToken[1][0];\n      const sendGridResponse = await sendResetPasswordLink(\n        firstName,\n        email,\n        resetToken\n      );\n\n      if (sendGridResponse.length && sendGridResponse[0].statusCode === 202) {\n        res.status(201).send({\n          message: \"Check the email, for reset password link\",\n          data: { id, email, resetToken }\n        });\n      } else {\n        res.status(500).send({\n          error: \"Unable to send the email with sendgrid\"\n        });\n      }\n    } else {\n      res.status(404).send({ error: \"Invalid credentials\" });\n    }\n  }\n\n  static async updatePassword(req, res) {\n    const { password } = req.body;\n    const { email } = req.user;\n\n    const newPassword = await hashPassword(password);\n    const updatedUser = await User.update(\n      { password: newPassword, resetToken: \"\" },\n      { where: { email }, returning: true }\n    );\n\n    if (updatedUser[0]) {\n      const { id } = updatedUser[1][0];\n      res.status(200).send({\n        message: \"Password updated successfully, please login\",\n        user: { email, id }\n      });\n    } else {\n      res.status(404).send({ error: \"Unable to updated password\" });\n    }\n  }\n}\n\nexport default ResetPassword;\n"],"file":"users.js"}