{"version":3,"sources":["../../src/controllers/collection.js"],"names":["Collection","Models","CollectionController","req","res","body","type","title","author","userId","user","id","files","file","previewImage","result","Promise","all","cloudinaryOutput","createdCollection","create","status","send","message","params","collection","findOne","where","error","previewPublicId","collectionPublicId","deletedCollection","destroy","updatedCollection","update","returning","query","page","collections","findAll","offset","limit","length"],"mappings":"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","sourcesContent":["import Models from \"../../models\";\nimport {\n  uploadFile,\n  deleteFile,\n  extractCloudinaryOutput\n} from \"../helpers/uploadFileCloudinary\";\n\nconst { Collection } = Models;\n\nclass CollectionController {\n  static async create(req, res) {\n    const { type, title, author } = req.body;\n    const { id: userId } = req.user;\n    const { files } = req;\n    const { file, previewImage } = files;\n    const result = await Promise.all([\n      await uploadFile(file[0]),\n      await uploadFile(previewImage[0])\n    ]);\n\n    const cloudinaryOutput = extractCloudinaryOutput(result);\n    const createdCollection = await Collection.create({\n      type,\n      title,\n      author,\n      ...cloudinaryOutput,\n      userId\n    });\n\n    res\n      .status(201)\n      .send({ message: \"Collection uploaded successfully\", createdCollection });\n  }\n\n  static async fetchOne(req, res) {\n    const { id } = req.params;\n    const collection = await Collection.findOne({ where: { id } });\n    if (collection) {\n      res.status(200).send({\n        message: \"Resource retrieved successfully\",\n        collection\n      });\n    } else {\n      res.status(404).send({ error: \"Collection not found\" });\n    }\n  }\n\n  static async deleteOne(req, res) {\n    const { id } = req.params;\n    const { previewPublicId, collectionPublicId } = req.collection;\n    const result = await Promise.all([\n      await deleteFile(previewPublicId),\n      await deleteFile(collectionPublicId)\n    ]);\n    if (result) {\n      const deletedCollection = await Collection.destroy({ where: { id } });\n      if (deletedCollection) {\n        res.status(200).send({ message: \"Collection deleted successfully\" });\n      } else {\n        res.status(404).send({ error: \"Collection does not exist\", result });\n      }\n    } else {\n      res.status(404).send({ error: \"Collection does not exist\" });\n    }\n  }\n\n  static async updateCollection(req, res) {\n    const { id } = req.params;\n    const { body } = req;\n    const updatedCollection = await Collection.update(\n      { ...body },\n      { where: { id }, returning: true }\n    );\n    if (updatedCollection[0]) {\n      res.status(200).send({\n        message: \"Collection updated successfully\",\n        collection: updatedCollection[1][0]\n      });\n    } else {\n      res.status(404).send({ error: \"Collection does not exist\" });\n    }\n  }\n\n  static async getAll(req, res) {\n    const { page, type } = req.query;\n    const collections = await Collection.findAll({\n      where: { type },\n      offset: (page - 1) * 10,\n      limit: 10\n    });\n    if (collections.length) {\n      res.status(200).send({ message: \"Data retrieved successfully\", collections });\n    } else {\n      res.status(404).send({ error: \"Data not found\" });\n    }\n  }\n}\n\nexport default CollectionController;\n"],"file":"collection.js"}